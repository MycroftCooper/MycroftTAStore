#pragma kernel CSMain
float4 _CustomTime;
float2 _SeaSize;
float _WaveSpeed;
float _WaveHeight;
float2 _WaveDensity;

Texture2D _Noise; // 噪声纹理
RWTexture2D<float4> _Result;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // 获取当前像素坐标
    int2 texelIndex = int2(id.xy);

    int textureWidth, textureHeight;
    _Noise.GetDimensions(textureWidth, textureHeight);
    float2 textureResolution = float2(textureWidth, textureHeight);

    // 计算实际 UV 坐标，以适配不同海面大小和贴图分辨率
    float2 uv = (float2(texelIndex) / textureResolution) * _SeaSize;

    // 使用 WaveDensity 调整 UV 坐标的比例，改变噪声采样的缩放
    uv *= _WaveDensity;

    // 计算波浪效果
    float waveSpeed = _CustomTime.y * _WaveSpeed;
    float noise = _Noise.Load(int3(uv + waveSpeed, 0)).r;
    float height = noise * _WaveHeight;

    // 计算相邻顶点的高度来计算法线
    float heightLeft = _Noise.Load(int3(uv + float2(-1 / textureResolution.x, 0), 0)).r * _WaveHeight;
    float heightRight = _Noise.Load(int3(uv + float2(1 / textureResolution.x, 0), 0)).r * _WaveHeight;
    float heightUp = _Noise.Load(int3(uv + float2(0, -1 / textureResolution.y), 0)).r * _WaveHeight;
    float heightDown = _Noise.Load(int3(uv + float2(0, 1 / textureResolution.y), 0)).r * _WaveHeight;

    // 计算法线
    float3 normal = normalize(float3(heightLeft - heightRight, 1, heightUp - heightDown));

    // 输出法线和高度到 _SurfaceOutputData
    _Result[texelIndex] = float4(normal * 0.5 + 0.5, height);
}